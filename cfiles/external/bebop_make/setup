### -*- mode: Makefile;-*-
### Time-stamp: <2008-07-20 19:14:04 mhoemmen>
###
### Setup for Makefiles for various BeBOP projects.  Not meant to be
### edited by users.
###
### ----------------------------------------------------------- 
### The BeBOP Sparse Matrix Converter and its associated projects
### (bebop_make, bebop_util, and sparse_matrix_converter) are subject
### to the following licensing terms:
### 
### Copyright (c) 2008, Regents of the University of California
### All rights reserved.
### 
### Redistribution and use in source and binary forms, with or
### without modification, are permitted provided that the
### following conditions are met:
### 
###     * Redistributions of source code must retain the above
### copyright notice, this list of conditions and the following
### disclaimer.
### 
###     * Redistributions in binary form must reproduce the
### above copyright notice, this list of conditions and the
### following disclaimer in the documentation and/or other
### materials provided with the distribution.
### 
###     * Neither the name of the University of California,
### Berkeley, nor the names of its contributors may be used to
### endorse or promote products derived from this software
### without specific prior written permission.
### 
### THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
### CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
### INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
### MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
### DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
### CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
### SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
### BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
### SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
### INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
### WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
### NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
### OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
### SUCH DAMAGE.
### 
######################################################################

## Set up Valgrind configuration.
ifeq "$(VALGRIND_SUPPORTED)" "1"
  ifeq "$(BUILD_MODE)" "debug"
    USE_VALGRIND=1
  else 
    USE_VALGRIND=0
  endif
else
  USE_VALGRIND=0
endif

## Set up library and include paths, and other flags
CPPFLAGS += -I../include
LIBS += -lm
CFLAGS += $(FPIC_FLAG)

## Set the debug/optimization flags
ifeq "$(BUILD_MODE)" "debug"
  CFLAGS += $(CFLAGS_DEBUG)
else
  CFLAGS += $(CFLAGS_OPT)
endif

## Adjust flags as necessary if including Pthreads support.
ifeq "$(USE_PTHREADS)" "1"
  CPPFLAGS += -DUSE_PTHREADS=1
  LIBS += -lpthread
endif

## Adjust flags as necessary if you want to use <complex.h> and the
## C99 complex arithmetic datatypes.
ifeq "$(USE_C99_COMPLEX)" "1"
  CPPFLAGS += -DHAVE_COMPLEX_H=1
endif  

ifeq "$(USE_VALGRIND)" "1"
  CPPFLAGS += -DUSING_VALGRIND_CLIENT_REQUESTS=1
  # Need gnu99 instead of c99 for Valgrind, so that it can use inline assembly.
  # C99 features are needed for complex numbers.  This is definitely a gcc-only
  # feature.
  CFLAGS += -std=gnu99
endif

ifeq "$(USE_ISNAN)" "1"
  CPPFLAGS += -DHAVE_ISNAN=1
endif
