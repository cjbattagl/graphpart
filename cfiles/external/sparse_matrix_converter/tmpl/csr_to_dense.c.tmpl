/* -*- Mode: C -*- */

/** 
 * @file csr_to_dense.c.tmpl
 * @author Mark Hoemmen
 * @date Time-stamp: <2008-07-16 16:02:14 mhoemmen>
 *
 * Copyright (c) 2008, Regents of the University of California 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the
 * following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright 
 *   notice, this list of conditions and the following disclaimer in 
 *   the documentation and/or other materials provided with the 
 *   distribution.
 *
 * * Neither the name of the University of California, Berkeley, nor
 *   the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior
 *   written permission.  
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <assert.h>
#include <stdlib.h>

#include "dense_setzero.h"


void
__sparse_CSR_to_dense_col_${Size:Name}_${Ind:Name}_${Val:Name} (${Val:Type} mat[],
								const ${Size:Type} nrows,
								const ${Size:Type} ncols,
								const ${Size:Type} pitch,
								const ${Val:Type}* const restrict val,
								const ${Ind:Type}* const restrict ind,
								const ${Ind:Type}* const restrict ptr)
{
  ${Size:Type} i, k;

  /* First set all elements of mat to zero */
  __setzero_dense_col_${Size:Name}_${Ind:Name}_${Val:Name} (mat, nrows, ncols, pitch);

  /* Now iterate over each row of the sparse matrix, writing the
     nonzero entries to the dense matrix */
  for (i = 0; i < nrows; i++)
    {
      const ${Size:Type} start = ptr[i];
      const ${Size:Type} end = ptr[i+1];
      for (k = start; k < end; k++)
        mat[i + pitch*ind[k]] = val[k];
    }
}

void
__sparse_CSR_to_dense_row_${Size:Name}_${Ind:Name}_${Val:Name} (${Val:Type} mat[],
								const ${Size:Type} nrows,
								const ${Size:Type} ncols,
								const ${Size:Type} pitch,
								const ${Val:Type}* const restrict val,
								const ${Ind:Type}* const restrict ind,
								const ${Ind:Type}* const restrict ptr)
{
  ${Size:Type} i, k;

  /* First set all elements of mat to zero */
  __setzero_dense_row_${Size:Name}_${Ind:Name}_${Val:Name} (mat, nrows, ncols, pitch);

  /* Now iterate over each row of the sparse matrix, writing the
     nonzero entries to the dense matrix */
  for (i = 0; i < nrows; i++)
    {
      const ${Size:Type} start = ptr[i];
      const ${Size:Type} end = ptr[i+1];
      for (k = start; k < end; k++)
        mat[pitch*i + ind[k]] = val[k];
    }
}
