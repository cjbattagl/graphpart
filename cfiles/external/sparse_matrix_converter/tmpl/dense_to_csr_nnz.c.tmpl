/* -*- Mode: C -*- */

/**
 * @file dense_to_csr_nnz.c.tmpl
 * @author Mark Hoemmen
 * @date Time-stamp: <2008-07-16 16:15:30 mhoemmen>
 *
 * Copyright (c) 2008, Regents of the University of California 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the
 * following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright 
 *   notice, this list of conditions and the following disclaimer in 
 *   the documentation and/or other materials provided with the 
 *   distribution.
 *
 * * Neither the name of the University of California, Berkeley, nor
 *   the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior
 *   written permission.  
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "dense_to_csr_nnz.h"
#include <assert.h>


void
__dense_row_to_sparse_CSR_nnzptr_${Size:Name}_${Ind:Name}_${Val:Name} (${Ind:Type}* restrict ptr,
								       const ${Size:Type} nrows,
								       const ${Size:Type} ncols,
								       const ${Size:Type} pitch,
								       const ${Val:Type} mat[])
{
  ${Size:Type} i, j, nzcount;

  for (i = 0, nzcount = 0, ptr[i] = 0;
       i < nrows; 
       i++)
    {
      const ${Val:Type}* restrict row = &mat[i * pitch];
      ptr[i+1] = ptr[i];

      for (j = 0; j < ncols; j++)
	{
          /*
           * This correctly accounts for NaN (not-a-number), because NaN is
           * not equal to any number, including itself.  We want to store NaNs
           * as nonzeros, and that is what they are -- not equal to zero.
           */
          if (row[j] != 0.0) 
            {
	      ptr[i+1]++;
              nzcount++;
            }
        }
      assert (nzcount == ptr[i+1]);
    }
}

void
__dense_col_to_sparse_CSR_nnzptr_${Size:Name}_${Ind:Name}_${Val:Name} (${Ind:Type}* restrict ptr,
								       const ${Size:Type} nrows,
								       const ${Size:Type} ncols,
								       const ${Size:Type} pitch,
								       const ${Val:Type} mat[])
{
  ${Size:Type} i, j, nzcount, colstart, cur;

  /*
   * We first use ptr[i] to count the number of nonzeros in row i.
   * ptr has nrows+1 elements.
   */
  for (i = 0; i <= nrows; i++)
    ptr[i] = 0;

  /*
   * Compute the number of nonzeros in each row, by sweeping down the
   * columns of the matrix in order.  This should perform better for a
   * matrix stored in column order.  Whatever locality is in the
   * nonzero patterns is the locality that we get with accesses to
   * ptr[i] here.
   *
   * j:        current column index (in [0, ncols))
   * colstart: offset of start of each column in mat
   * nzcount:  current total number of nonzeros
   */
  for (j = 0, colstart = 0, nzcount = 0;
       j < ncols;
       j++, colstart += pitch)
    {
      /* col: current column of the input (dense) matrix */
      const ${Val:Type}* restrict col = &mat[colstart];
      
      /*
       * i: current row index (in [0, nrows))
       */
      for (i = 0; i < nrows; i++)
        {
          /*
           * This correctly accounts for NaN (not-a-number), because NaN is
           * not equal to any number, including itself.  We want to store NaNs
           * as nonzeros, and that is what they are -- not equal to zero.
           */
          if (col[i] != 0.0) 
            {
              ptr[i]++;
              nzcount++;
            }
        }
    }
  /* 
   * Use the nonzero-per-row counts to build the array of row
   * "pointers".  This is a fairly standard prefix sum operation which
   * could admit parallelization; I've chosen to save space instead
   * (as a parallel implementation would probably require an
   * additional array).
   * 
   * cur is always a row nonzero count, and never the final value of
   * ptr[i].  
   */
  for (cur = ptr[1], i = 1;
       i <= nrows; 
       cur = ptr[i+1], i++)
    ptr[i] = cur + ptr[i-1];

  assert (ptr[nrows] == nzcount);
  /*
   * We do not have to return anything, because
   *     ptr[nrows] == number of nonzeros
   */
}

